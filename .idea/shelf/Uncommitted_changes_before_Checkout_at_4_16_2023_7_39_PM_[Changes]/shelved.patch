Index: src/main/java/BGU/Group13B/service/Session.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package BGU.Group13B.service;\r\n\r\nimport BGU.Group13B.backend.Repositories.Implementations.UserRepositoryImpl.UserRepositoryAsHashmap;\r\nimport BGU.Group13B.backend.SystemInfo;\r\nimport BGU.Group13B.backend.User.User;\r\nimport BGU.Group13B.backend.User.UserPermissions;\r\nimport BGU.Group13B.backend.storePackage.Market;\r\nimport BGU.Group13B.backend.storePackage.permissions.NoPermissionException;\r\n\r\nclass Session implements ISession {\r\n    private final Market market;\r\n    UserRepositoryAsHashmap userRepositoryAsHashmap;\r\n    public Session(Market market) {\r\n        this.market = market;\r\n\r\n        //callbacks initialization\r\n        SingletonCollection.setAddToUserCart(this::addToCart);\r\n    }\r\n\r\n    @Override\r\n    public void addProduct(int userId, String productName, int quantity, double price, int storeId) throws NoPermissionException {\r\n        market.addProduct(userId, productName, quantity, price, storeId);\r\n    }\r\n\r\n    @Override\r\n    public void addToCart(int userId, int storeId, int productId, int quantity) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void purchaseProductCart(int userId, String address, String creditCardNumber, String creditCardMonth, String creditCardYear, String creditCardHolderFirstName, String creditCardHolderLastName, String creditCardCcv, String id, String creditCardType) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void purchaseProposalSubmit(int userId, int storeId, int productId, double proposedPrice) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void immediatePurchase(int userId, int storeId, int productId, int quantity) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void createLotteryPurchaseForProduct(int storeManagerId, int storeId, int productId) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void participateInLotteryPurchase(int userId, int storeId, int productId, double fraction) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void auctionPurchase(int userId, int storeId, int productId, double price) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public SystemInfo getSystemInformation(int adminId) {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public synchronized void register(int userId,String username, String password, String email) {\r\n        User user = userRepositoryAsHashmap.getUser(userId);\r\n                try {\r\n                    //the first if might not be necessary when we will connect to web\r\n                    if(!user.isRegistered()) {\r\n                        if(userRepositoryAsHashmap.checkIfUserExists(username) != null) {\r\n                            user.register(username, password, email);\r\n                        }else{\r\n                            System.out.println(\"user with this username already exists!\");\r\n                        }\r\n                    }else{\r\n                        System.out.println(\"already registered!\");\r\n                    }\r\n                }catch(Exception e){\r\n                    System.out.println(e.getMessage());\r\n                }\r\n\r\n        }\r\n\r\n\r\n    @Override\r\n    public int login(int userID,String username, String password) {\r\n        try {\r\n            //gets the user that we want to log into\r\n            User user = userRepositoryAsHashmap.checkIfUserExists(username);\r\n            synchronized (user) {\r\n                user.login(username, password);\r\n                //removes the current guest profile to swap to the existing member one\r\n                userRepositoryAsHashmap.removeUser(userID);\r\n                //gets the new id - of the user we logging into\r\n                return userRepositoryAsHashmap.getUserId(user);\r\n            }\r\n        } catch (Exception e) {\r\n            System.out.println(e.getMessage());\r\n            return 0;\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public void logout(int userID) {\r\n        synchronized (userRepositoryAsHashmap.getUser(userID)){\r\n            userRepositoryAsHashmap.getUser(userID).logout();\r\n        }\r\n        \r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/BGU/Group13B/service/Session.java b/src/main/java/BGU/Group13B/service/Session.java
--- a/src/main/java/BGU/Group13B/service/Session.java	(revision c88f734a00097a85a23dfc951a11d2ea729d7be8)
+++ b/src/main/java/BGU/Group13B/service/Session.java	(date 1681662726932)
@@ -107,6 +107,6 @@
         synchronized (userRepositoryAsHashmap.getUser(userID)){
             userRepositoryAsHashmap.getUser(userID).logout();
         }
-        
+
     }
 }
